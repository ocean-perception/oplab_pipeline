"""Identify the images with the brightest maximum brightness values.

Usage:
find_images_with_artefacts.py [-h] [-t THRESHOLD] brightness_file [output]

positional arguments:
  brightness_file       File with max brightness values, generated by
                        compute_max_brightness.py
  output                File with list of images with max brightness larger than
                        threshold (default: filelist_bright_images.txt)

optional arguments:
  -h, --help            show this help message and exit
  -t THRESHOLD, --threshold THRESHOLD
                        Threshold for max brightness (default: 200)

Copyright (c) 2024, University of Southampton
All rights reserved.
Licensed under the BSD 3-Clause License.
See LICENSE.md file in the project root for full license information.
"""

import argparse

import pandas as pd

parser = argparse.ArgumentParser(
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    description=(
        "Get list of images with very bright spots. Typically these bright spots "
        "appear when there is something very close to the camera (and the strobes), "
        "e.g. a fish. These should be removed for the training of the image "
        "attenuation parameters."
    ),
)
parser.add_argument(
    "brightness_file",
    help="File with max brightness values, generated by compute_max_brightness.py",
)
parser.add_argument(
    "output",
    type=str,
    nargs="?",
    default="filelist_images_with_potential_outliers.txt",
    help="File with list of images with max brightness larger than threshold",
)
parser.add_argument(
    "-t", "--threshold", type=int, default=200, help="Threshold for max brightness"
)
args = parser.parse_args()

df = pd.read_csv(args.brightness_file)
number_above_threshold = len(df[df["max_brightness"] > args.threshold])
print(
    f"Number of images with max brightness larger than {args.threshold}: "
    f"{number_above_threshold}"
)
df[df["max_brightness"] > args.threshold].to_csv(
    args.output, columns=["path"], index=False, header=False
)
print("If you want to copy the images to a folder, use this command:")
print("mkdir FOLDER_TO_COPY_TO")
print("cat", args.output, "| xargs -I {} cp {} FOLDER_TO_COPY_TO/")
print(
    "Once you have a filelist of images with artefacts, you can generate a filelist of "
    "images without artefacts using this command:"
    "grep -v -f outlier_images.txt full_file_list.txt > file_list_without_outliers.txt"
)
